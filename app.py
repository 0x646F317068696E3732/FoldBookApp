import os
import logging
from flask import Flask, render_template, request, jsonify, session
from book_folding_dual import DualFoldBookGenerator
import json

logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET", "book_folding_art_secret_key_2024")

# Initialize book folding generator
generator = DualFoldBookGenerator()

@app.route('/')
def index():
    """Main page with the book folding art generator interface"""
    return render_template('index.html')

@app.route('/generate_pattern', methods=['POST'])
def generate_pattern():
    """Generate folding pattern for given text and book specifications"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ'}), 400
            
        text = data.get('text', '').strip().upper()
        book_pages = int(data.get('book_pages', 400))
        book_height = float(data.get('book_height', 200))
        
        if not text:
            return jsonify({'error': '–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        if len(text) > 20:
            return jsonify({'error': '–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤'}), 400
        
        if book_pages < 200:
            return jsonify({'error': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: 200'}), 400
        
        # Generate the folding pattern
        pattern = generator.generate_pattern(text, book_pages, book_height)
        
        # Calculate statistics
        total_folds = len(pattern) * 2  # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–º–µ–µ—Ç 2 —Å–≥–∏–±–∞
        pages_used = len(pattern)
        estimated_time = total_folds * 2  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —Å–≥–∏–±
        
        stats = {
            'total_folds': total_folds,
            'pages_used': pages_used,
            'estimated_time_minutes': estimated_time
        }
        
        result = {
            'pattern': pattern,
            'statistics': {
                'total_folds': stats['total_folds'],
                'pages_used': stats['pages_used'],
                'text': text,
                'estimated_time_minutes': stats['estimated_time_minutes']
            },
            'book_specs': {
                'pages': book_pages,
                'height': book_height
            }
        }
        
        return jsonify(result)
        
    except ValueError as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {str(e)}'}), 400
    except Exception as e:
        app.logger.error(f"Error generating pattern: {str(e)}")
        return jsonify({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞'}), 500

@app.route('/get_templates')
def get_templates():
    """Get predefined templates for common shapes and symbols"""
    # –ü—Ä–æ—Å—Ç—ã–µ –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
    templates = {
        'logos': [
            {'id': 'love', 'name': 'LOVE', 'icon': '‚ù§Ô∏è'},
            {'id': 'hope', 'name': 'HOPE', 'icon': 'üåü'},
            {'id': 'dream', 'name': 'DREAM', 'icon': 'üí≠'}
        ],
        'symbols': [
            {'id': 'heart', 'name': '–°–µ—Ä–¥—Ü–µ', 'icon': '‚ô•'},
            {'id': 'star', 'name': '–ó–≤–µ–∑–¥–∞', 'icon': '‚òÖ'},
            {'id': 'smile', 'name': '–£–ª—ã–±–∫–∞', 'icon': '‚ò∫'}
        ]
    }
    return jsonify(templates)

@app.route('/generate_template_pattern', methods=['POST'])
def generate_template_pattern():
    """Generate pattern for a predefined template"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ'}), 400
            
        template_id = data.get('template_id')
        book_pages = int(data.get('book_pages', 400))
        book_height = float(data.get('book_height', 200))
        
        if not template_id:
            return jsonify({'error': 'Template ID is required'}), 400
        
        # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è template_id –≤ —Ç–µ–∫—Å—Ç
        template_texts = {
            'love': 'LOVE',
            'hope': 'HOPE', 
            'dream': 'DREAM',
            'heart': '‚ô•',
            'star': '‚òÖ',
            'smile': '‚ò∫'
        }
        
        text = template_texts.get(template_id, template_id.upper())
        
        # Generate pattern
        pattern = generator.generate_pattern(text, book_pages, book_height)
        
        # Calculate statistics
        total_folds = len(pattern) * 2  # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–º–µ–µ—Ç 2 —Å–≥–∏–±–∞
        pages_used = len(pattern)
        estimated_time = total_folds * 2  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —Å–≥–∏–±
        
        stats = {
            'total_folds': total_folds,
            'pages_used': pages_used,
            'estimated_time_minutes': estimated_time
        }
        
        result = {
            'pattern': pattern,
            'statistics': {
                'total_folds': stats['total_folds'],
                'pages_used': stats['pages_used'],
                'template_id': template_id,
                'estimated_time_minutes': stats['estimated_time_minutes']
            },
            'book_specs': {
                'pages': book_pages,
                'height': book_height
            }
        }
        
        return jsonify(result)
        
    except Exception as e:
        app.logger.error(f"Error generating template pattern: {str(e)}")
        return jsonify({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞'}), 500

@app.route('/export_pattern', methods=['POST'])
def export_pattern():
    """Export pattern as downloadable instructions"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ'}), 400
            
        pattern = data.get('pattern', [])
        book_specs = data.get('book_specs', {})
        text_or_template = data.get('text', data.get('template_id', 'Pattern'))
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        instructions = f"–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –°–ö–õ–ê–î–´–í–ê–ù–ò–Æ –ö–ù–ò–ì–ò\n–¢–µ–∫—Å—Ç: {text_or_template}\n\n"
        instructions += f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–∏–≥–∏:\n"
        instructions += f"- –°—Ç—Ä–∞–Ω–∏—Ü: {book_specs.get('pages', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        instructions += f"- –í—ã—Å–æ—Ç–∞: {book_specs.get('height', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} –º–º\n\n"
        instructions += "–ü–û–®–ê–ì–û–í–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:\n\n"
        
        for i, fold in enumerate(pattern, 1):
            fold_type = fold.get('fold_type', '–æ–±–∞')
            if fold_type == 'top':
                corner_text = "–≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª"
            elif fold_type == 'bottom':
                corner_text = "–Ω–∏–∂–Ω–∏–π —É–≥–æ–ª"
            else:
                corner_text = "–æ–±–∞ —É–≥–ª–∞"
                
            instructions += f"{i}. –°—Ç—Ä–∞–Ω–∏—Ü–∞ {fold['page']}: —Å–æ–≥–Ω—É—Ç—å {corner_text} –Ω–∞ {fold['offset_mm']} –º–º\n"
        
        return jsonify({
            'instructions': instructions,
            'filename': f"book_folding_{text_or_template.lower().replace(' ', '_')}.txt"
        })
        
    except Exception as e:
        app.logger.error(f"Error exporting pattern: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π'}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
